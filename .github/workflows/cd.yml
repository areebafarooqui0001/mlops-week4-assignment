name: Deploy ML Pipeline to GKE

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: mlops-assignment-cluster
  GKE_LOCATION: us-east1
  DEPLOYMENT_NAME: mlops-assignment-app
  REPOSITORY: mlops-artifacts
  IMAGE: mlops-assignment-fastapi

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Setup DVC'
        uses: iterative/setup-dvc@v1
      
      - name: 'DVC pull artifacts'
        run: dvc pull artifacts/model.joblib 

      - name: 'Docker auth'
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build \
            --file deployment/Dockerfile \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            .

      - name: Publish Docker image to Artifact Registry
        run: |
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

      - name: Get GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      - name: Deploy to GKE
        run: |
          # Replace image URL in deployment.yaml
          sed -i "s|image:.*|image: $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA|" k8s/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/

          # Wait for rollout to complete
          kubectl rollout status deployment/$DEPLOYMENT_NAME

          # Show service info
          kubectl get services -o wide

      - name: Setup CML
        uses: iterative/setup-cml@v2

      - name: Get Service IP and Comment using CML
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EXTERNAL_IP=$(kubectl get service mlops-assignment-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")

          cat > cml_report.md <<EOF
          ## âœ… ML Pipeline Deployment Complete

          **Deployment Status**: Successfully deployed to GKE cluster \`${GKE_CLUSTER}\`

          **Service Details**:
          - **Service Name**: mlops-assignment-service
          - **External IP**: \`${EXTERNAL_IP}\`
          - **Cluster**: ${GKE_CLUSTER} (${GKE_LOCATION})
          - **Image**: ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:$GITHUB_SHA

          **Example cURL Request**:
          \`\`\`bash
          curl -X 'POST' 'http://${EXTERNAL_IP}/predict' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}'
          \`\`\`

          **Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          EOF

          cml comment create cml_report.md

